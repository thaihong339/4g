name: Build OnePlus Ace 5 Kernel (ace5.sh converted)

on:
  workflow_dispatch:

jobs:
  build-ace5:
    runs-on: ubuntu-22.04
    env:
      DEVICE_NAME: oneplus_ace5
      REPO_MANIFEST: oneplus_ace5.xml
      KERNEL_SUFFIX: -android14-TG@qdykernel
      ENABLE_KPM: "true"
      ENABLE_LZ4KD: "true"
      CCACHE_MAXSIZE: 8G

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 git curl ccache flex bison libssl-dev libelf-dev bc zip build-essential gcc-aarch64-linux-gnu

      - name: Setup ccache
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${DEVICE_NAME}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${DEVICE_NAME}"
          ccache -M "$CCACHE_MAXSIZE"

      - name: Install repo tool
        run: |
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Sync kernel source
        run: |
          WORKSPACE="$HOME/kernel_${DEVICE_NAME}"
          mkdir -p "$WORKSPACE/kernel_workspace"
          cd "$WORKSPACE/kernel_workspace"
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/sm8650 -m "$REPO_MANIFEST" --depth=1
          repo sync -c -j$(nproc) --no-tags

      - name: Ensure kernel_platform exists
        run: |
          if [ ! -d "$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform" ]; then
            echo "::error ::kernel_platform directory was not created. Please check your manifest and repo sync output."
            ls -l "$HOME/kernel_${DEVICE_NAME}/kernel_workspace"
            exit 1
          fi

      - name: Clean dirty tags and ABI protections
        run: |
          cd "$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform"
          for d in common msm-kernel; do
            rm -f "$d"/android/abi_gki_protected_exports_* || true
          done
          for f in common/scripts/setlocalversion msm-kernel/scripts/setlocalversion external/dtc/scripts/setlocalversion; do
            [ -f "$f" ] || continue
            sed -i 's/ -dirty//g' "$f"
            grep -q 'res=.*s/-dirty' "$f" || echo 'res=$(echo "$res" | sed '\''s/-dirty//g'\'')' >> "$f"
            sed -i '$s|echo "\$res"|echo "${KERNEL_SUFFIX}"|' "$f"
          done

      - name: Setup SukiSU
        run: |
          cd "$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          cd KernelSU
          git checkout main || true
          KSU_VERSION=$(expr $(git rev-list --count main) + 10700)
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "KSU_VERSION=$KSU_VERSION" >> "$GITHUB_ENV"

      - name: Setup susfs and patches
        run: |
          cd "$HOME/kernel_${DEVICE_NAME}/kernel_workspace"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 || true
          git clone https://github.com/Xiaomichael/kernel_patches.git || true
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git || true

          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./common/ || true
          cp ../kernel_patches/next/syscall_hooks.patch ./common/ || true
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true

          echo "Searching for susfs.h..."
          SUSFS_HEADER=$(find ../susfs4ksu -name susfs.h | head -n 1)
          if [[ -z "$SUSFS_HEADER" ]]; then
            echo "::error ::susfs.h not found after searching! Build cannot continue."
            exit 1
          fi
          echo "Found susfs.h at: $SUSFS_HEADER"
          cp "$SUSFS_HEADER" ./common/include/linux/susfs.h

          if [[ "${ENABLE_LZ4KD}" == "true" ]]; then
            cp ../kernel_patches/001-lz4.patch ./common/ || true
            cp ../kernel_patches/lz4armv8.S ./common/lib || true
            cp ../kernel_patches/002-zstd.patch ./common/ || true
          fi

          cd common
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || exit 1
          cp ../../kernel_patches/69_hide_stuff.patch ./ || true
          patch -p1 -F 3 < 69_hide_stuff.patch || exit 1
          patch -p1 -F 3 < syscall_hooks.patch || exit 1
          if [[ "${ENABLE_LZ4KD}" == "true" ]]; then
            git apply -p1 < 001-lz4.patch || exit 1
            patch -p1 < 002-zstd.patch || exit 1
          fi

      - name: Add SUSFS config
        run: |
          cd "$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform"
          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig
          grep -qxF 'CONFIG_KSU=y' "$DEFCONFIG" || cat <<EOF >> "$DEFCONFIG"
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_DEBUG_INFO_BTF=n
          EOF
          [[ "${ENABLE_KPM}" == "true" ]] && echo "CONFIG_KPM=y" >> "$DEFCONFIG"
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Build kernel
        run: |
          cd "$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform/common"
          export CLANG_PATH="$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin"
          export RUSTC_PATH="$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform/prebuilts/rust/linux-x86/1.73.0b/bin/rustc"
          export PAHOLE_PATH="$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform/prebuilts/kernel-build-tools/linux-x86/bin/pahole"
          export PATH="$CLANG_PATH:/usr/lib/ccache:$PATH"
          make LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
            RUSTC="$RUSTC_PATH" PAHOLE="$PAHOLE_PATH" \
            LD=ld.lld HOSTLD=ld.lld \
            O=out KCFLAGS+=-O2 \
            CONFIG_LTO_CLANG=y CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n CONFIG_LTO_NONE=n \
            gki_defconfig
          make -j$(nproc) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
            RUSTC="$RUSTC_PATH" PAHOLE="$PAHOLE_PATH" \
            LD=ld.lld HOSTLD=ld.lld \
            O=out KCFLAGS+=-O2 Image

          if [ ! -f out/arch/arm64/boot/Image ]; then
            echo "::error ::Kernel build failed, Image not found!"
            exit 1
          fi

      - name: Apply KPM patch (if enabled)
        if: env.ENABLE_KPM == 'true'
        run: |
          cd "$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform/common/out/arch/arm64/boot"
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: Package with AnyKernel3
        run: |
          cd ~
          git clone -q https://github.com/thaihong339/AnyKernel3.git --depth=1
          rm -rf ./AnyKernel3/.git ./AnyKernel3/push.sh
          cp "$HOME/kernel_${DEVICE_NAME}/kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image" ./AnyKernel3/
          cd AnyKernel3
          zip -r "../AnyKernel3_${KSU_VERSION}_${DEVICE_NAME}_SuKiSu.zip" . -x "*.git*"

      - name: Upload kernel zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_${{ env.DEVICE_NAME }}_SuKiSu
          path: AnyKernel3_${{ env.DEVICE_NAME }}_SuKiSu.zip

      - name: Upload Image artifact
        uses: actions/upload-artifact@v4
        with:
          name: Image_${{ env.DEVICE_NAME }}
          path: kernel_oneplus_ace5/kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image
